<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习 on Corso&#39;s blog</title>
    <link>https://corso.netlify.com/categories/%E5%AD%A6%E4%B9%A0/</link>
    <description>Recent content in 学习 on Corso&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 15 Sep 2018 17:11:12 +0800</lastBuildDate>
    
	<atom:link href="https://corso.netlify.com/categories/%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>dubbo常用配置示例</title>
      <link>https://corso.netlify.com/post/dubbo-confg1/</link>
      <pubDate>Sat, 15 Sep 2018 17:11:12 +0800</pubDate>
      
      <guid>https://corso.netlify.com/post/dubbo-confg1/</guid>
      <description>dubbo常用配置 持续更新
url直连模式  开发过程中常常需要先本地调试自己的服务再注册到注册中心，debug可采用直连本地的方式（应该还有更好的方法）
 provider.xml
1 2 3 4  &amp;lt;!--使用 zookeeper 注册中心暴露服务，注意要先开启 zookeeper--&amp;gt; &amp;lt;dubbo:registry address=&amp;#34;zookeeper://localhost:2181&amp;#34; /&amp;gt; &amp;lt;!-- 使用dubbo协议在20880端口暴露服务 --&amp;gt; &amp;lt;dubbo:protocol name=&amp;#34;dubbo&amp;#34; port=&amp;#34;20880&amp;#34; /&amp;gt;   在dubbo 20880暴露了服务，即在consumer.xml中通过url直连即可
1 2 3 4 5  &amp;lt;!--向 zookeeper 订阅 provider 的地址，由 zookeeper 定时推送 register 设置为false --&amp;gt; &amp;lt;dubbo:registry address=&amp;#34;zookeeper://localhost:2181&amp;#34; register=&amp;#34;false&amp;#34;/&amp;gt; &amp;lt;!--使用 dubbo 协议调用定义好的 demoService 接口 客户端引入的bean id--&amp;gt; &amp;lt;!-- url 直连dubbo服务不经过注册中心 --&amp;gt; &amp;lt;dubbo:reference id=&amp;#34;demoService&amp;#34; interface=&amp;#34;com.dubbo.api.DemoService&amp;#34; url=&amp;#34;dubbo://localhost:20880&amp;#34;/&amp;gt;   </description>
    </item>
    
    <item>
      <title>javacv 获取视频截图</title>
      <link>https://corso.netlify.com/post/opencv/</link>
      <pubDate>Mon, 21 May 2018 17:11:12 +0800</pubDate>
      
      <guid>https://corso.netlify.com/post/opencv/</guid>
      <description>获取视频截图&amp;ndash;javacv 之前在相关文章评论过，有人问我当中遇到的问题，所以写出来
maven依赖
代码很多，我也是网上找的，这里就不粘出来了，主要记录一下问题
代码在windows环境下完全没用问题，如果是在win环境下编译的放到liunx下跑会报错：
java.lang.NoClassDefFoundError: Could not initialize class org.bytedeco.javacpp.avutil at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:270) at org.bytedeco.javacpp.Loader.load(Loader.java:390) at org.bytedeco.javacpp.Loader.load(Loader.java:358) at org.bytedeco.javacpp.avformat$AVFormatContext.(avformat.java:2539) at org.bytedeco.javacv.FFmpegFrameGrabber.startUnsafe(FFmpegFrameGrabber.java:383) at org.bytedeco.javacv.FFmpegFrameGrabber.start(FFmpegFrameGrabber.java:377) at com.example.Application.convert(Application.java:53) at com.example.Application.run(Application.java:103) at org.springframework.boot.SpringApplication.runCommandLineRunners(SpringApplication.java:674) at org.springframework.boot.SpringApplication.afterRefresh(SpringApplication.java:693) at org.springframework.boot.SpringApplication.run(SpringApplication.java:322) at org.springframework.boot.SpringApplication.run(SpringApplication.java:969) at org.springframework.boot.SpringApplication.run(SpringApplication.java:958) at com.example.Application.main(Application.java:28) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:53) at java.lang.Thread.run(Thread.java:745)
仔细观察后，pom引的是win下的jar，所以需在liunx下编译，之后依然报错
仔细发现每次重启项目后第一次错误信息是：
java.lang.UnsatisfiedLinkError: no jniavdevice in java.library.path at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1867) ~[?:1.8.0_144] at java.lang.Runtime.loadLibrary0(Runtime.java:870) ~[?:1.8.0_144] &amp;hellip; Caused by: java.</description>
    </item>
    
  </channel>
</rss>